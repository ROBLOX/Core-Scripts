<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="ModuleScript" referent="RBXB4C4411EA2734CFF9A6656AB6AFB7FDC">
		<Properties>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">KeyboardMovement</string>
			<ProtectedString name="Source"><![CDATA[--[[
	// FileName: ComputerMovementKeyboardMovement
	// Version 1.2
	// Written by: jeditkacheff/jmargh
	// Description: Implements movement controls for keyboard devices
--]]
local Players = game:GetService('Players')
local UserInputService = game:GetService('UserInputService')

local KeyboardMovement = {}

while not Players.LocalPlayer do
	wait()
end

local LocalPlayer = Players.LocalPlayer
local CachedHumanoid = nil
local TextFocusReleasedCn = nil
local TextFocusGainedCn = nil
local WindowFocusReleasedCn = nil
local InputBeganCn = nil
local InputEndedCn = nil

local MasterControl = require(script.Parent)
local currentMoveVector = Vector3.new(0,0,0)

--[[ Local Functions ]]--
local function getHumanoid()
	local character = LocalPlayer and LocalPlayer.Character
	if character then
		if CachedHumanoid and CachedHumanoid.Parent == character then
			return CachedHumanoid
		else
			CachedHumanoid = nil
			for _,child in pairs(character:GetChildren()) do
				if child:IsA('Humanoid') then
					CachedHumanoid = child
					return CachedHumanoid
				end
			end
		end
	end
end

--[[ Public API ]]--
function KeyboardMovement:Enable()
	if not UserInputService.KeyboardEnabled then
		return
	end
	
	local forwardValue  = 0
	local backwardValue = 0
	local leftValue = 0
	local rightValue = 0
	
	local updateMovement = function(inputState)
		if inputState == Enum.UserInputState.Cancel then
			MasterControl:AddToPlayerMovement(-currentMoveVector)
			currentMoveVector = Vector3.new(0, 0, 0)
		else
			MasterControl:AddToPlayerMovement(-currentMoveVector)
			currentMoveVector = Vector3.new(leftValue + rightValue,0,forwardValue + backwardValue)
			MasterControl:AddToPlayerMovement(currentMoveVector)	
		end
	end
	
	local moveForwardFunc = function(inputObject)		
		if inputObject.UserInputState == Enum.UserInputState.Begin then
			forwardValue = -1
		elseif inputObject.UserInputState == Enum.UserInputState.End then
			forwardValue = 0
		end
		updateMovement(inputState)
	end
	
	local moveBackwardFunc = function(inputObject)	
		if inputObject.UserInputState == Enum.UserInputState.Begin then
			backwardValue = 1
		elseif inputObject.UserInputState == Enum.UserInputState.End then
			backwardValue = 0
		end
		updateMovement(inputState)
	end
	
	local moveLeftFunc = function(inputObject)
		if inputObject.UserInputState == Enum.UserInputState.Begin then
			leftValue = -1
		elseif inputObject.UserInputState == Enum.UserInputState.End then
			leftValue = 0
		end
		updateMovement(inputState)
	end
	
	local moveRightFunc = function(inputObject)	
		if inputObject.UserInputState == Enum.UserInputState.Begin then
			rightValue = 1
		elseif inputObject.UserInputState == Enum.UserInputState.End then
			rightValue = 0
		end
		updateMovement(inputState)
	end

	local jumpFunc = function(inputObject)
		MasterControl:SetIsJumping(inputObject.UserInputState == Enum.UserInputState.Begin)
	end
	
	local function onFocusReleased()
		local humanoid = getHumanoid()
		if humanoid then
			MasterControl:AddToPlayerMovement(-currentMoveVector)
			currentMoveVector = Vector3.new(0, 0, 0)
			forwardValue, backwardValue, leftValue, rightValue = 0, 0, 0, 0
			MasterControl:SetIsJumping(false)
		end
	end
	
	local function onTextFocusGained(textboxFocused)
		MasterControl:SetIsJumping(false)
	end
		
	InputBeganCn = UserInputService.InputBegan:connect(function(inputObject, isProcessed)
			if not isProcessed then
				if inputObject.KeyCode == Enum.KeyCode.Backspace then
					local humanoid = getHumanoid()
					if humanoid and (humanoid.Sit or humanoid.PlatformStand) then
						MasterControl:DoJump()
					end
				elseif inputObject.KeyCode == Enum.KeyCode.Space then
					jumpFunc(inputObject)
				elseif inputObject.KeyCode == Enum.KeyCode.W then
					moveForwardFunc(inputObject)
				elseif inputObject.KeyCode == Enum.KeyCode.S then
					moveBackwardFunc(inputObject)
				elseif inputObject.KeyCode == Enum.KeyCode.A then
					moveLeftFunc(inputObject)
				elseif inputObject.KeyCode == Enum.KeyCode.D then
					moveRightFunc(inputObject)
				end
			end
		end)

	InputEndedCn = UserInputService.InputEnded:connect(function(inputObject, isProcessed)
		if not isProcessed then
			if inputObject.KeyCode == Enum.KeyCode.Backspace then
				local humanoid = getHumanoid()
				if humanoid and (humanoid.Sit or humanoid.PlatformStand) then
					MasterControl:DoJump()
				end
			elseif inputObject.KeyCode == Enum.KeyCode.Space then
				jumpFunc(inputObject)
			elseif inputObject.KeyCode == Enum.KeyCode.W then
				moveForwardFunc(inputObject)
			elseif inputObject.KeyCode == Enum.KeyCode.S then
				moveBackwardFunc(inputObject)
			elseif inputObject.KeyCode == Enum.KeyCode.A then
				moveLeftFunc(inputObject)
			elseif inputObject.KeyCode == Enum.KeyCode.D then
				moveRightFunc(inputObject)
			end
		end
	end)
	
	TextFocusReleasedCn = UserInputService.TextBoxFocusReleased:connect(onFocusReleased)
	TextFocusGainedCn = UserInputService.TextBoxFocused:connect(onTextFocusGained)
	WindowFocusReleasedCn = UserInputService.WindowFocused:connect(onFocusReleased)
end

function KeyboardMovement:Disable()
	if InputBeganCn then
		InputBeganCn:disconnect()
		InputBeganCn = nil
	end
	if InputEndedCn then
		InputEndedCn:disconnect()
		InputEndedCn = nil
	end
	if TextFocusReleasedCn then
		TextFocusReleasedCn:disconnect()
		TextFocusReleasedCn = nil
	end
	if TextFocusGainedCn then
		TextFocusGainedCn:disconnect()
		TextFocusGainedCn = nil
	end
	if WindowFocusReleasedCn then
		WindowFocusReleasedCn:disconnect()
		WindowFocusReleasedCn = nil
	end
	
	MasterControl:AddToPlayerMovement(-currentMoveVector)
	currentMoveVector = Vector3.new(0,0,0)
	MasterControl:SetIsJumping(false)
end

return KeyboardMovement
]]></ProtectedString>
		</Properties>
	</Item>
</roblox>
